export {}
declare global {
  const RAYNER_DIR: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/constants')['RAYNER_DIR']
  const STORAGE_OUTBOUNDS: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/constants')['STORAGE_OUTBOUNDS']
  const XRAY_CORE_ARCHES: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/constants')['XRAY_CORE_ARCHES']
  const XRAY_CORE_BIN: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/constants')['XRAY_CORE_BIN']
  const XRAY_CORE_DIR: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/constants')['XRAY_CORE_DIR']
  const XRAY_CORE_PLATFOFMS: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/constants')['XRAY_CORE_PLATFOFMS']
  const XRAY_CORE_RELEASE: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/constants')['XRAY_CORE_RELEASE']
  const adoPost: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/routes/ado.post')['default']
  const consola: typeof import('consola')['default']
  const createApp: typeof import('h3')['createApp']
  const createDefu: typeof import('defu')['createDefu']
  const createRouter: typeof import('h3')['createRouter']
  const defaultXrayConfig: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/templates')['defaultXrayConfig']
  const defu: typeof import('defu')['defu']
  const destr: typeof import('destr')['destr']
  const disoPost: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/routes/diso.post')['default']
  const downloadFromURL: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/common')['downloadFromURL']
  const downloadXrayCoreZip: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['downloadXrayCoreZip']
  const enoPost: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/routes/eno.post')['default']
  const eventHandler: typeof import('h3')['eventHandler']
  const execXrayAsync: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['execXrayAsync']
  const existXrayCoreBin: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['existXrayCoreBin']
  const fse: typeof import('fs-extra')['default']
  const generateServerPort: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/common')['generateServerPort']
  const getRandomPort: typeof import('get-port-please')['getRandomPort']
  const hash: typeof import('ohash')['hash']
  const join: typeof import('pathe')['join']
  const killProcessByPid: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/common')['killProcessByPid']
  const listen: typeof import('listhen')['listen']
  const loadRaynerConfig: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/common')['loadRaynerConfig']
  const loadXrayConfig: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['loadXrayConfig']
  const parseFilename: typeof import('ufo')['parseFilename']
  const parseXrayCoreReleaseURL: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['parseXrayCoreReleaseURL']
  const readBody: typeof import('h3')['readBody']
  const resolve: typeof import('pathe')['resolve']
  const restartXrayCore: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['restartXrayCore']
  const rewriteXrayConfig: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['rewriteXrayConfig']
  const rmoPost: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/routes/rmo.post')['default']
  const router: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/router')['router']
  const runXrayCore: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['runXrayCore']
  const setup: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/ranyer')['setup']
  const startXrayCore: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['startXrayCore']
  const stopXrayCore: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['stopXrayCore']
  const storage: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/store')['storage']
  const store: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/store')['store']
  const testXrayConfig: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['testXrayConfig']
  const toNodeListener: typeof import('h3')['toNodeListener']
  const unzip: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/common')['unzip']
  const unzipXrayCoreZip: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['unzipXrayCoreZip']
  const validateConfig: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['validateConfig']
  const writeDefaltXrayConfig: typeof import('C:/Users/zekun.jin/Documents/Projects/rayner/src/utils/xray')['writeDefaltXrayConfig']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { RaynerConfig, RaynerAdapter, XrayConfig, XrayLogConfig, XrayInbound, XraySniffingConfig, XrayInboundSettings, XrayOutbound, XrayOutboundSettings, XrayVNextServer, XrayVNextUser, XrayShadowsocksServer, XrayHttpResponse, XrayRoutingConfig, XrayRule, XrayBalancer, XrayStrategy, XrayObservatoryConfig } from 'C:/Users/zekun.jin/Documents/Projects/rayner/src/types/index.ts'
}